//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.04.08 at 09:40:50 PM EDT 
//


package xml.metadatasharing;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for PropertyTypeEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="PropertyTypeEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="filename"/>
 *     &lt;enumeration value="filepath"/>
 *     &lt;enumeration value="locationUrl"/>
 *     &lt;enumeration value="isKernel"/>
 *     &lt;enumeration value="isParasitic"/>
 *     &lt;enumeration value="isStealth"/>
 *     &lt;enumeration value="isPolymorphic"/>
 *     &lt;enumeration value="isVirus"/>
 *     &lt;enumeration value="isNonReplicating"/>
 *     &lt;enumeration value="isDamaged"/>
 *     &lt;enumeration value="registryValueData"/>
 *     &lt;enumeration value="urlParameterString"/>
 *     &lt;enumeration value="postData"/>
 *     &lt;enumeration value="registrant"/>
 *     &lt;enumeration value="registrationDate"/>
 *     &lt;enumeration value="ownerAddress"/>
 *     &lt;enumeration value="adminContact"/>
 *     &lt;enumeration value="technicalContact"/>
 *     &lt;enumeration value="nameServer"/>
 *     &lt;enumeration value="countryCodeISO3166-2"/>
 *     &lt;enumeration value="countryCodeISO3166-3"/>
 *     &lt;enumeration value="countryCodeFIPS"/>
 *     &lt;enumeration value="city"/>
 *     &lt;enumeration value="region"/>
 *     &lt;enumeration value="isp"/>
 *     &lt;enumeration value="httpMethod"/>
 *     &lt;enumeration value="referrer"/>
 *     &lt;enumeration value="operatingSystem"/>
 *     &lt;enumeration value="userAgent"/>
 *     &lt;enumeration value="browser"/>
 *     &lt;enumeration value="comment"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "PropertyTypeEnum")
@XmlEnum
public enum PropertyTypeEnum {


    /**
     * 
     *       filename - names of files, normally associated with file objects.
     *      
     * 
     */
    @XmlEnumValue("filename")
    FILENAME("filename"),

    /**
     * 
     *       filepath - directory path of files, normally associated with file objects.
     *      
     * 
     */
    @XmlEnumValue("filepath")
    FILEPATH("filepath"),

    /**
     * 
     *       locationUrl - a url at which the file sample can be retrieved, associated with file objects.
     *      
     * 
     */
    @XmlEnumValue("locationUrl")
    LOCATION_URL("locationUrl"),

    /**
     * 
     *        isKernel - true/false if the malware has a kernel component. This can be applied either to a classification
     *            or to a file object.
     *         
     * 
     */
    @XmlEnumValue("isKernel")
    IS_KERNEL("isKernel"),

    /**
     * 
     *        isParasitic - true/false if the malware infects other files by attaching to them (if it also replicates then it is a parasitic virus). This can be applied 
     *            either to a classification or to a file object.
     *         
     * 
     */
    @XmlEnumValue("isParasitic")
    IS_PARASITIC("isParasitic"),

    /**
     * 
     *        isStealth - true/false if the malware uses rootkit style techniques to hide from users or security software. This can be applied 
     *          either to a classification or to a file object.
     *         
     * 
     */
    @XmlEnumValue("isStealth")
    IS_STEALTH("isStealth"),

    /**
     * 
     *        isPolymorphic - true/false if the malware is polymorphic, changing its appearance either through replication or server-side techniques.
     *            This can be applied either to a classification or to a file object.
     *         
     * 
     */
    @XmlEnumValue("isPolymorphic")
    IS_POLYMORPHIC("isPolymorphic"),

    /**
     * 
     *        isVirus - true/false if the malware is a virus (replicates and propagates recursively). This can be applied either to a classification or to a file object.
     *         
     * 
     */
    @XmlEnumValue("isVirus")
    IS_VIRUS("isVirus"),

    /**
     * 
     *          isNonReplicating - true/false if the malware is non replicating. This can be applied either to a classification or to a file object.
     *         
     * 
     */
    @XmlEnumValue("isNonReplicating")
    IS_NON_REPLICATING("isNonReplicating"),

    /**
     * 
     *          isDamaged - true/false if the malware sample is damaged. This can be applied to a file object.
     *         
     * 
     */
    @XmlEnumValue("isDamaged")
    IS_DAMAGED("isDamaged"),

    /**
     * 
     *       registryValueData - data from the registry from Microsoft operating systems. This is normally applied to a registry object. 
     *         It could also be applied to a relationship between a malware sample (file object) and a registry object, to indicate the data
     *         that was written by the malware.
     *      
     * 
     */
    @XmlEnumValue("registryValueData")
    REGISTRY_VALUE_DATA("registryValueData"),

    /**
     * 
     *       urlParameterString - parameter string information associated with a GET http request. This is normally applied to a uri object.
     *         It could also be applied to a relationship between a malware sample (file object) and a uri object, indicating the parameters 
     *         associated with the communication.
     *      
     * 
     */
    @XmlEnumValue("urlParameterString")
    URL_PARAMETER_STRING("urlParameterString"),

    /**
     * 
     *      postData - parameter information associated with a POST http request. This is normally applied to a relationship between a 
     *        malware sample (file object) and a uri object, indicating the data sent with the communication.
     *     
     * 
     */
    @XmlEnumValue("postData")
    POST_DATA("postData"),

    /**
     * 
     *       registrant - the registrant of a domain name, used for domain objects.
     *      
     * 
     */
    @XmlEnumValue("registrant")
    REGISTRANT("registrant"),

    /**
     * 
     *       registrationDate - the registration date of a domain name, used for domain objects.
     *      
     * 
     */
    @XmlEnumValue("registrationDate")
    REGISTRATION_DATE("registrationDate"),

    /**
     * 
     *       ownerAddress - the address associated with the owner of a domain name, used for domain objects. 
     *      
     * 
     */
    @XmlEnumValue("ownerAddress")
    OWNER_ADDRESS("ownerAddress"),

    /**
     * 
     *       adminContact - the administrative contact address associated with a domain name, used for domain objects. 
     *      
     * 
     */
    @XmlEnumValue("adminContact")
    ADMIN_CONTACT("adminContact"),

    /**
     * 
     *       technicalContact - the technical contact address associated with a domain name, used for domain objects. 
     *      
     * 
     */
    @XmlEnumValue("technicalContact")
    TECHNICAL_CONTACT("technicalContact"),

    /**
     * 
     *       nameServer - the name server associated with a domain name, used for domain objects. 
     *      
     * 
     */
    @XmlEnumValue("nameServer")
    NAME_SERVER("nameServer"),

    /**
     * 
     *       countryCodeISO3166-2 - the ISO3166-2 code for country, usually associated with an ip address object, 
     *          e.g. the country where that IP address is hosted.
     *      
     * 
     */
    @XmlEnumValue("countryCodeISO3166-2")
    COUNTRY_CODE_ISO_3166_2("countryCodeISO3166-2"),

    /**
     * 
     *       countryCodeISO3166-3 - the ISO3166-3 code for country, usually associated with an ip address object.
     *         e.g. the country where that IP address is hosted.
     *      
     * 
     */
    @XmlEnumValue("countryCodeISO3166-3")
    COUNTRY_CODE_ISO_3166_3("countryCodeISO3166-3"),

    /**
     * 
     *       countryCodeFIPS - theFIPS code for country, usually associated with an ip address object.
     *         e.g. the country where that IP address is hosted.
     *      
     * 
     */
    @XmlEnumValue("countryCodeFIPS")
    COUNTRY_CODE_FIPS("countryCodeFIPS"),

    /**
     * 
     *       city - the name of a city, usually associated with an ip address object, e.g. the city in which that IP address is hosted.
     *      
     * 
     */
    @XmlEnumValue("city")
    CITY("city"),

    /**
     * 
     *       region - the name of a region, usually associated with an ip address object, e.g. the region in which that IP address is hosted.
     *      
     * 
     */
    @XmlEnumValue("region")
    REGION("region"),

    /**
     * 
     *       isp - the name of a Internet Service Provider, usually associated with an ip address object, 
     *         e.g. the isp that hosts the IP address.
     *      
     * 
     */
    @XmlEnumValue("isp")
    ISP("isp"),

    /**
     * 
     *       httpMethod - the http method (e.g. GET/POST/etc.) associated with an http request. This is usually associated with a
     *         relationship between malware (file object), and a uri (uri object), to indicate the type of http request made.
     *      
     * 
     */
    @XmlEnumValue("httpMethod")
    HTTP_METHOD("httpMethod"),

    /**
     * 
     *      referrer - the referrer uri, used when accessing a uri, associated with a uri object, or applied to a relationship between an 
     *      entity and a uri, for the user agent used when that entity visited that uri.
     *     
     * 
     */
    @XmlEnumValue("referrer")
    REFERRER("referrer"),

    /**
     * 
     *       operatingSystem - environmental information of the operating system used. Normally used as a property of a relationship 
     *          between malware (file object) and some other object.    
     *      
     * 
     */
    @XmlEnumValue("operatingSystem")
    OPERATING_SYSTEM("operatingSystem"),

    /**
     * 
     *       userAgent - User agent used when accessing a uri, associated with a uri object, or applied to a relationship between an 
     *        entity and a uri, for the user agent used when that entity visited that uri.
     *      
     * 
     */
    @XmlEnumValue("userAgent")
    USER_AGENT("userAgent"),

    /**
     * 
     *       browser - browser used when accessing a uri, associated with a uri object, or applied to a relationship between an 
     *       entity and a uri, for the browser used when that entity visited that uri
     *      
     * 
     */
    @XmlEnumValue("browser")
    BROWSER("browser"),

    /**
     * 
     *       comment - a human readable comment that can be applied to any object or relationship.
     *      
     * 
     */
    @XmlEnumValue("comment")
    COMMENT("comment");
    private final String value;

    PropertyTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static PropertyTypeEnum fromValue(String v) {
        for (PropertyTypeEnum c: PropertyTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
