//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.04.09 at 05:02:22 PM EDT 
//


package org.mitre.maec.default_vocabularies_1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for CommandandControlTacticalObjectivesEnum-1.0.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="CommandandControlTacticalObjectivesEnum-1.0">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="check for payload"/>
 *     &lt;enumeration value="validate data"/>
 *     &lt;enumeration value="control malware via remote command"/>
 *     &lt;enumeration value="send system information"/>
 *     &lt;enumeration value="send heartbeat data"/>
 *     &lt;enumeration value="generate c2 domain name(s)"/>
 *     &lt;enumeration value="update configuration"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "CommandandControlTacticalObjectivesEnum-1.0")
@XmlEnum
public enum CommandandControlTacticalObjectivesEnum10 {


    /**
     * The 'check for payload' value indicates that the mawlare instance is able to query a command and control server to check whether a new malicious payload is available for download.
     * 
     */
    @XmlEnumValue("check for payload")
    CHECK_FOR_PAYLOAD("check for payload"),

    /**
     * The 'validate data' value indicates that the malware instance is able to validate the integrity of the data it receives from a command and control server.
     * 
     */
    @XmlEnumValue("validate data")
    VALIDATE_DATA("validate data"),

    /**
     * The 'control malware via remote command' value indicates that the malware instance is able to execute commands issued to it from a remote source such as a command and control server, for the purpose of controlling its behavior.
     * 
     */
    @XmlEnumValue("control malware via remote command")
    CONTROL_MALWARE_VIA_REMOTE_COMMAND("control malware via remote command"),

    /**
     * The 'send system information' value indicates that the malware instance is able to send data regarding the system on which it is executing to a command and control server.
     * 
     */
    @XmlEnumValue("send system information")
    SEND_SYSTEM_INFORMATION("send system information"),

    /**
     * The 'send heartbeat data' value indicates that the malware instance is able to send heartbeat data to a command and control server, indicating that it is still active on the host system and able to communicate.
     * 
     */
    @XmlEnumValue("send heartbeat data")
    SEND_HEARTBEAT_DATA("send heartbeat data"),

    /**
     * The 'generate c2 domain name(s)' value indicates that the malware instance is able to generate the domain name of the command and control server to which it connects to.
     * 
     */
    @XmlEnumValue("generate c2 domain name(s)")
    GENERATE_C_2_DOMAIN_NAME_S("generate c2 domain name(s)"),

    /**
     * The 'update configuration' value indicates that the malware instance is able to update its configuration using data received from a command and control server.
     * 
     */
    @XmlEnumValue("update configuration")
    UPDATE_CONFIGURATION("update configuration");
    private final String value;

    CommandandControlTacticalObjectivesEnum10(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static CommandandControlTacticalObjectivesEnum10 fromValue(String v) {
        for (CommandandControlTacticalObjectivesEnum10 c: CommandandControlTacticalObjectivesEnum10 .values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
