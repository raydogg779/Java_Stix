//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.04.09 at 05:02:22 PM EDT 
//


package org.mitre.maec.default_vocabularies_1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ProbingTacticalObjectivesEnum-1.0.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ProbingTacticalObjectivesEnum-1.0">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="identify os"/>
 *     &lt;enumeration value="check for proxy"/>
 *     &lt;enumeration value="check for firewall"/>
 *     &lt;enumeration value="check for network drives"/>
 *     &lt;enumeration value="map local network"/>
 *     &lt;enumeration value="inventory system applications"/>
 *     &lt;enumeration value="check language"/>
 *     &lt;enumeration value="check for internet connectivity"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ProbingTacticalObjectivesEnum-1.0")
@XmlEnum
public enum ProbingTacticalObjectivesEnum10 {


    /**
     * The 'identify os' value indicates that the malware instance is able to identify the operating system under which it executes.
     * 
     */
    @XmlEnumValue("identify os")
    IDENTIFY_OS("identify os"),

    /**
     * The 'check for proxy' value indicates that the malware instance is able to check whether the network environment in which it executes contains a hardware or software proxy.
     * 
     */
    @XmlEnumValue("check for proxy")
    CHECK_FOR_PROXY("check for proxy"),

    /**
     * The 'check for firewall' value indicates that the malware instance is able to check whether the network environment in which it executes contains a hardware or software firewall.
     * 
     */
    @XmlEnumValue("check for firewall")
    CHECK_FOR_FIREWALL("check for firewall"),

    /**
     * The 'check for shared drive' value indicates that the malware instance is able to check for network drives that may be present in the network environment.
     * 
     */
    @XmlEnumValue("check for network drives")
    CHECK_FOR_NETWORK_DRIVES("check for network drives"),

    /**
     * The 'map local network' value indicates that the malware instance is able to map the layout of the local network environment in which it executes.
     * 
     */
    @XmlEnumValue("map local network")
    MAP_LOCAL_NETWORK("map local network"),

    /**
     * The 'inventory system applications' value indicates that the malware instance is able to inventory the applications installed on the system on which it executes.
     * 
     */
    @XmlEnumValue("inventory system applications")
    INVENTORY_SYSTEM_APPLICATIONS("inventory system applications"),

    /**
     * The 'check language' value indicates that the malware instance is able to check the language of the host system on which it executes.
     * 
     */
    @XmlEnumValue("check language")
    CHECK_LANGUAGE("check language"),

    /**
     * The 'check for internet connectivity' value indicates that the malware instance is able to check whether the network environment in which it executes is connected to the internet.
     * 
     */
    @XmlEnumValue("check for internet connectivity")
    CHECK_FOR_INTERNET_CONNECTIVITY("check for internet connectivity");
    private final String value;

    ProbingTacticalObjectivesEnum10(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ProbingTacticalObjectivesEnum10 fromValue(String v) {
        for (ProbingTacticalObjectivesEnum10 c: ProbingTacticalObjectivesEnum10 .values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
