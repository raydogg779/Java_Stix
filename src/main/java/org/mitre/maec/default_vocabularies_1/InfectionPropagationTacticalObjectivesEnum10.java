//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.04.09 at 05:02:22 PM EDT 
//


package org.mitre.maec.default_vocabularies_1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for InfectionPropagationTacticalObjectivesEnum-1.0.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="InfectionPropagationTacticalObjectivesEnum-1.0">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="identify file"/>
 *     &lt;enumeration value="perform autonomous remote infection"/>
 *     &lt;enumeration value="identify target machine(s)"/>
 *     &lt;enumeration value="perform social-engineering based remote infection"/>
 *     &lt;enumeration value="inventory victims"/>
 *     &lt;enumeration value="write code into file"/>
 *     &lt;enumeration value="modify file"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "InfectionPropagationTacticalObjectivesEnum-1.0")
@XmlEnum
public enum InfectionPropagationTacticalObjectivesEnum10 {


    /**
     * The 'identify file' value indicates that the malware instance is able to identify a file or files on a local, removable, and/or network drive for infection.
     * 
     */
    @XmlEnumValue("identify file")
    IDENTIFY_FILE("identify file"),

    /**
     * The 'perform autonomous remote infection' value indicates that the malware instance is able to infect a remote machine autonomously, without the involvement of any end user (e.g., through the exploitation of a remote procedure call vulnerability).
     * 
     */
    @XmlEnumValue("perform autonomous remote infection")
    PERFORM_AUTONOMOUS_REMOTE_INFECTION("perform autonomous remote infection"),

    /**
     * The 'identify target machine(s)' value indicates that the malware instance is able to identify one or more machines to be targeted for infection via some remote means (e.g., via email or the network).
     * 
     */
    @XmlEnumValue("identify target machine(s)")
    IDENTIFY_TARGET_MACHINE_S("identify target machine(s)"),

    /**
     * The 'perform social-engineering based remote infection' value indicates that the malware instance is able to infect remote machines via some method that involves social engineering (e.g., sending an email with a malicious attachment).
     * 
     */
    @XmlEnumValue("perform social-engineering based remote infection")
    PERFORM_SOCIAL_ENGINEERING_BASED_REMOTE_INFECTION("perform social-engineering based remote infection"),

    /**
     * The 'inventory victims' value indicates that the malware instance is able to keep an inventory of the victims that it remotely infects.
     * 
     */
    @XmlEnumValue("inventory victims")
    INVENTORY_VICTIMS("inventory victims"),

    /**
     * The 'write code into file' value indicates that the malware instance is able to write code into a file.
     * 
     */
    @XmlEnumValue("write code into file")
    WRITE_CODE_INTO_FILE("write code into file"),

    /**
     * The 'modify file' value indicates that the malware instance is able to modify a file in some other manner than writing code to it, such as packing it (in terms of binary executable packing). 
     * 
     */
    @XmlEnumValue("modify file")
    MODIFY_FILE("modify file");
    private final String value;

    InfectionPropagationTacticalObjectivesEnum10(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static InfectionPropagationTacticalObjectivesEnum10 fromValue(String v) {
        for (InfectionPropagationTacticalObjectivesEnum10 c: InfectionPropagationTacticalObjectivesEnum10 .values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
