//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.04.09 at 05:02:22 PM EDT 
//


package org.mitre.maec.default_vocabularies_1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ProcessThreadActionNameEnum-1.0.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ProcessThreadActionNameEnum-1.0">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="create thread"/>
 *     &lt;enumeration value="kill thread"/>
 *     &lt;enumeration value="create remote thread in process"/>
 *     &lt;enumeration value="enumerate threads"/>
 *     &lt;enumeration value="get thread username"/>
 *     &lt;enumeration value="impersonate process"/>
 *     &lt;enumeration value="revert thread to self"/>
 *     &lt;enumeration value="get thread context"/>
 *     &lt;enumeration value="set thread context"/>
 *     &lt;enumeration value="queue apc in thread"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ProcessThreadActionNameEnum-1.0")
@XmlEnum
public enum ProcessThreadActionNameEnum10 {


    /**
     * The 'create thread' value specifies the defined action of creating a new thread in the virtual address space of the calling process.
     * 
     */
    @XmlEnumValue("create thread")
    CREATE_THREAD("create thread"),

    /**
     * The 'kill thread' value specifies the defined action of killing a thread existing in the virtual address space of the calling process.
     * 
     */
    @XmlEnumValue("kill thread")
    KILL_THREAD("kill thread"),

    /**
     * The 'create remote thread in process' value specifies the defined action of creating a thread that runs in the virtual address space of another existing process.
     * 
     */
    @XmlEnumValue("create remote thread in process")
    CREATE_REMOTE_THREAD_IN_PROCESS("create remote thread in process"),

    /**
     * The 'enumerate threads' value specifies the defined action of enumerating all threads in the calling process.
     * 
     */
    @XmlEnumValue("enumerate threads")
    ENUMERATE_THREADS("enumerate threads"),

    /**
     * The 'get thread username' value specifies the defined action of getting the name or ID of the user associated with an existing thread.
     * 
     */
    @XmlEnumValue("get thread username")
    GET_THREAD_USERNAME("get thread username"),

    /**
     * Windows-specific.
     * 
     */
    @XmlEnumValue("impersonate process")
    IMPERSONATE_PROCESS("impersonate process"),

    /**
     * Windows-specific.
     * 
     */
    @XmlEnumValue("revert thread to self")
    REVERT_THREAD_TO_SELF("revert thread to self"),

    /**
     * Windows-specific.
     * 
     */
    @XmlEnumValue("get thread context")
    GET_THREAD_CONTEXT("get thread context"),

    /**
     * Windows-specific.
     * 
     */
    @XmlEnumValue("set thread context")
    SET_THREAD_CONTEXT("set thread context"),

    /**
     * Windows-specific.
     * 
     */
    @XmlEnumValue("queue apc in thread")
    QUEUE_APC_IN_THREAD("queue apc in thread");
    private final String value;

    ProcessThreadActionNameEnum10(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ProcessThreadActionNameEnum10 fromValue(String v) {
        for (ProcessThreadActionNameEnum10 c: ProcessThreadActionNameEnum10 .values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
