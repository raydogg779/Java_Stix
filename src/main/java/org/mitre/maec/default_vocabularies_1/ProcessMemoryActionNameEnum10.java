//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.04.09 at 05:02:22 PM EDT 
//


package org.mitre.maec.default_vocabularies_1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ProcessMemoryActionNameEnum-1.0.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ProcessMemoryActionNameEnum-1.0">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="allocate process virtual memory"/>
 *     &lt;enumeration value="free process virtual memory"/>
 *     &lt;enumeration value="modify process virtual memory protection"/>
 *     &lt;enumeration value="read from process memory"/>
 *     &lt;enumeration value="write to process memory"/>
 *     &lt;enumeration value="map file into process"/>
 *     &lt;enumeration value="unmap file from process"/>
 *     &lt;enumeration value="map library into process"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ProcessMemoryActionNameEnum-1.0")
@XmlEnum
public enum ProcessMemoryActionNameEnum10 {


    /**
     * The 'allocate process virtual memory' value specifies the defined action of allocating some virtual memory region in an existing process.
     * 
     */
    @XmlEnumValue("allocate process virtual memory")
    ALLOCATE_PROCESS_VIRTUAL_MEMORY("allocate process virtual memory"),

    /**
     * The 'free process virtual memory' value specifies the defined action of freeing some virtual memory region from an existing process.
     * 
     */
    @XmlEnumValue("free process virtual memory")
    FREE_PROCESS_VIRTUAL_MEMORY("free process virtual memory"),

    /**
     * The 'modify process virtual memory protection' value specifies the defined action of modifying the protection on a memory region in the virtual address space of an existing process.
     * 
     */
    @XmlEnumValue("modify process virtual memory protection")
    MODIFY_PROCESS_VIRTUAL_MEMORY_PROTECTION("modify process virtual memory protection"),

    /**
     * The 'read from process memory' value specifies the defined action of reading from a memory region of an existing process.
     * 
     */
    @XmlEnumValue("read from process memory")
    READ_FROM_PROCESS_MEMORY("read from process memory"),

    /**
     * The 'write to process memory' value specifies the defined action of writing to a memory region of an existing process.
     * 
     */
    @XmlEnumValue("write to process memory")
    WRITE_TO_PROCESS_MEMORY("write to process memory"),

    /**
     * The 'map file into process' value specifies the defined action of mapping an existing file into the address space of the calling process.
     * 
     */
    @XmlEnumValue("map file into process")
    MAP_FILE_INTO_PROCESS("map file into process"),

    /**
     * The 'unmap file from process' value specifies the defined action of unmapping an existing file from the address space of the calling process.
     * 
     */
    @XmlEnumValue("unmap file from process")
    UNMAP_FILE_FROM_PROCESS("unmap file from process"),

    /**
     * The 'map library into process' value specifies the defined action of mapping a library into the address space of the calling process.
     * 
     */
    @XmlEnumValue("map library into process")
    MAP_LIBRARY_INTO_PROCESS("map library into process");
    private final String value;

    ProcessMemoryActionNameEnum10(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ProcessMemoryActionNameEnum10 fromValue(String v) {
        for (ProcessMemoryActionNameEnum10 c: ProcessMemoryActionNameEnum10 .values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
