//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.04.09 at 05:02:22 PM EDT 
//


package org.mitre.maec.default_vocabularies_1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for AntiDetectionStrategicObjectivesEnum-1.0.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="AntiDetectionStrategicObjectivesEnum-1.0">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="security software evasion"/>
 *     &lt;enumeration value="hide executing code"/>
 *     &lt;enumeration value="self-modification"/>
 *     &lt;enumeration value="anti-memory forensics"/>
 *     &lt;enumeration value="hide non-executing code"/>
 *     &lt;enumeration value="hide malware artifacts"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "AntiDetectionStrategicObjectivesEnum-1.0")
@XmlEnum
public enum AntiDetectionStrategicObjectivesEnum10 {


    /**
     * The 'security software evasion' value indicates that the malware instance is able to evade security software (e.g., anti-virus tools).
     * 
     */
    @XmlEnumValue("security software evasion")
    SECURITY_SOFTWARE_EVASION("security software evasion"),

    /**
     * The 'hide executing code' value indicates that the malware instance is able to hide its executing code.
     * 
     */
    @XmlEnumValue("hide executing code")
    HIDE_EXECUTING_CODE("hide executing code"),

    /**
     * The 'self-modification' value indicates that the malware instance is able to modify itself.
     * 
     */
    @XmlEnumValue("self-modification")
    SELF_MODIFICATION("self-modification"),

    /**
     * The 'anti-memory forensics' value indicates that the malware instance is able to prevent or make memory forensics more difficult.
     * 
     */
    @XmlEnumValue("anti-memory forensics")
    ANTI_MEMORY_FORENSICS("anti-memory forensics"),

    /**
     * The 'hide non-executing code' value indicates that the malware instance is able to hide its non-executing code.
     * 
     */
    @XmlEnumValue("hide non-executing code")
    HIDE_NON_EXECUTING_CODE("hide non-executing code"),

    /**
     * The 'hide malware artifacts' value indicates that the malware instance is able to hide its artifacts.
     * 
     */
    @XmlEnumValue("hide malware artifacts")
    HIDE_MALWARE_ARTIFACTS("hide malware artifacts");
    private final String value;

    AntiDetectionStrategicObjectivesEnum10(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static AntiDetectionStrategicObjectivesEnum10 fromValue(String v) {
        for (AntiDetectionStrategicObjectivesEnum10 c: AntiDetectionStrategicObjectivesEnum10 .values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
